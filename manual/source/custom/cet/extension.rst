.. index::
   single: arena extension callbacks; introduction
   single: extension callbacks; introduction
   single: arena contraction callbacks; introduction
   single: contraction callbacks; introduction

.. _topic-extension:

Arena extension callbacks
=========================

There are situations in which the :term:`client program` needs to be
informed about the chunks of address space that an :term:`arena` is
managing. To support this, the MPS allows the client program to
specify two callback functions when creating a :term:`virtual memory
arena`: one function is called when the arena is *extended* (that is,
when it acquires a new chunk of address space from the operating
system), and the other when the arena is *contracted* (that is, when
it returns a chunk of address space to the operating system).

The use case that this feature is designed to support is debugging of dynamically generated code in 64-bit Windows. `Microsoft explains <MSDN>`_:

.. _`MSDN`: http://msdn.microsoft.com/en-us/library/windows/desktop/ms680595.aspx

    Function tables are used on 64-bit Windows to determine how to
    unwind or walk the stack. These tables are usually generated by
    the compiler and stored as part of the image. However,
    applications must provide the function table for dynamically
    generated code.

An application may install a dynamic function table by calling ``RtlInstallFunctionTableCallback()``, passing the region of memory in which the dynamically generated functions can be found, and may later delete the table by calling ``RtlDeleteFunctionTable()``.

So if the client program is storing dynamically generated functions in MPS-managed memory, then it could define callback functionss that install and delete the function table callback for the dynamically generated code, like this::

    void arena_extended(mps_arena_t arena, void *base, size_t size)
    {
        RtlInstallFunctionTableCallback(...);
    }

    void arena_contracted(mps_arena_t arena, void *base, size_t size)
    {
        RtlDeleteFunctionTable(...);
    }

and then pass these two functions using :term:`keyword arguments` to :c:func:`mps_arena_create_k`::

    MPS_ARGS_BEGIN(args) {
        MPS_ARGS_ADD(args, MPS_KEY_ARENA_EXTENDED, (mps_fun_t)arena_extended);
        MPS_ARGS_ADD(args, MPS_KEY_ARENA_CONTRACTED, (mps_fun_t)arena_contracted);
        /* ... other keyword arguments ... */
        MPS_ARGS_DONE(args);
        res = mps_arena_create_k(&arena, mps_arena_class_vm(), args);
    } MPS_ARGS_END(args);


.. index::
   single: arena extension callbacks; interface
   single: extension callbacks; interface
   single: arena contraction callbacks; interface
   single: contraction callbacks; interface

Arena extension callback interface
----------------------------------

::

    #include "mpscvm.h"

.. c:macro:: MPS_KEY_ARENA_EXTENDED

    A :term:`keyword argument` (of type :c:type:`mps_fun_t`) to
    :c:func:`mps_arena_create_k` whose value specifies a function that
    will be called when the arena is *extended*: that is, when it
    acquires a new chunk of address space from the operating system.

    The function receives three arguments: ``arena`` (the arena being
    extended), ``base`` (the base address of the new chunk of address
    space), and ``size`` (the size of the new chunk of address space,
    in bytes).

    The function must not call any function in the MPS, and must not
    access any memory managed by the MPS.

    .. note::

        This keyword argument is only supported by :term:`virtual
        memory arenas`.

.. c:macro:: MPS_KEY_ARENA_CONTRACTED

    A :term:`keyword argument` (of type :c:type:`mps_fun_t`) to
    :c:func:`mps_arena_create_k` whose value specifies a function that
    will be called when the arena is *contracted*: that is, when it
    finishes with a chunk of address space and returns it to the
    operating system.

    The function receives three arguments: ``arena`` (the arena being
    contracted), ``base`` (the base address of the old chunk of
    address space), and ``size`` (the size of the old chunk of address
    space, in bytes).

    The function must not call any function in the MPS, and must not
    access any memory managed by the MPS.

    .. note::

        This keyword argument is only supported by :term:`virtual
        memory arenas`.
