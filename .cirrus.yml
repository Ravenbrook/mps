# .cirrus.yml -- Cirrus CI configuration for the MPS

# FIXME: Copyright, licence, etc.

# FIXME: Specify versions of OS and toolchains.  Source?

# FIXME: This is just a test based on <https://cirrus-ci.org/guide/writing-tasks/#environment-variables>.

echo_task:
  container:
    image: ubuntu
  env:
    FOO: Bar
  echo_script: echo $FOO

# FIXME: Just a test based on https://cirrus-ci.org/guide/macOS/

XCA6LL_task:
  macos_instance:
    # What does this syntax mean?  See <https://github.com/cirruslabs/cirrus-ci-docs/discussions/1147#discussioncomment-4902556>.
    image: ghcr.io/cirruslabs/macos-ventura-xcode
  env:
    CC: cc
  script:
    - uname -a
    - $CC --version
    - $CC -dumpmachine
    - CC=$CC ./configure --prefix=$PWD/prefix && make install && make test

# https://cirrus-ci.org/guide/writing-tasks/ doesn't seem to allow for FreeBSD on arm64

FRI6LL_task:
  freebsd_instance:
    # Why is this a "family"?  See <https://github.com/cirruslabs/cirrus-ci-docs/discussions/1147#discussioncomment-4902556>.
    image_family: freebsd-13-1
  env.CC: clang
  script: |
    set -x
    uname -a
    pkg install -y gmake
    $CC --version
    $CC -dumpmachine
    CC=$CC ./configure --prefix=$PWD/prefix-clang && make install && make test

# FRA6LL doesn't seem to work.  Cirrus CI gets an "Agent is not
# responding!" error on its status page.
#
# There's no output from::
#
#   gcloud compute images list --project freebsd-org-cloud-dev --no-standard-images | grep -v amd64
#
# Fortunately, we can do this using Travis CI.  See .travis.yml.

# FRA6LL_task:
#   freebsd_instance:
#     image_family: freebsd-13-1
#     architecture: arm64
#   script: |
#     set -x
#     CC=clang
#     uname -a
#     pkg install -y gmake
#     $CC --version
#     $CC -dumpmachine
#     CC=$CC ./configure --prefix=$PWD/prefix-clang && make install && make test

FRI6GC_task:
  freebsd_instance:
    image_family: freebsd-13-1
  env.CC: gcc
  script: |
    set -x
    uname -a
    pkg install -y gmake gcc
    $CC --version
    $CC -dumpmachine
    CC=$CC ./configure --prefix=$PWD/prefix-clang && make install && make test

# Is this really "LI" if it's a docker container?  Does it matter?
# Is gcc:latest what we want to test against?
# Perhaps we should start with an ubuntu image.
LIA6GC_task:
  arm_container:
    image: gcc # https://hub.docker.com/_/gcc
  env.CC: gcc
  script: |
    set -x
    uname -a
    $CC --version
    $CC -dumpmachine
    CC=$CC ./configure --prefix=$PWD/prefix && make install && make test

LIA6LL_task:
  arm_container:
    image: ubuntu # https://hub.docker.com/_/ubuntu
  env.CC: clang
  script: |
    set -x
    uname -a
    apt-get update
    apt-get install -y make clang
    $CC --version
    $CC -dumpmachine
    CC=$CC ./configure --prefix=$PWD/prefix && make install && make test
